---
	layout: "layouts/home.njk"
---

<h1 id="upcoming-header" class="section-header" style="display: none">Upcoming Events</h1>
<ul class="image-item ltr" id="upcoming-list" style="display: none;"></ul>

<figure style="text-align: center;>
<img width="500" src="https://d602mxa74hbsi.cloudfront.net/shades+crop.jpg" alt="Shades and Shadows Reading, 2017. Photo credit: One More Bites Blog" />
<figcaption>Shades and Shadows Reading, 2017.
	<br />Photo credit: <a href="https://www.instagram.com/onemorebiteblog/">One More Bite</a></figcaption>
</figure>

<h1 class="section-header" style="display: none" id="past-header">Past Events</h1>
<ul class="image-item ltr" style="display: none" id="past-list"></ul>

<p><a href="./allevents/">See older events...</a></p>

<h1 class="section-header">Recorded Appearances</h1>
<ul class="image-item ltr">

{% for post in collections['events-recorded'] | head(-4, true) %}
	<li>
		<img src="{{ post.data.coverImage }}" />
		<div class="info">
			<h2>{{ post.date | eventTime }}</h2>
			<h3 class="event-title">{{ post.data.title }}</h3>
			<h4>{{ post.data.location }}</h4>
			<h4>{{ post.data.city }}</h4>
			<p><a href="{{ post.url }}">More info...</a></p>
		</div>
	</li>
	{% endfor %}
</ul>
<p><a href="./recordedevents/">See more...</a></p>


<script>

const renderHTML = post => {
	return `<li><img src="${post.image}" /><div class="info">
		<h2>${formatDate(post.date)}</h2>
		<h3 class="event-time">${post.time}</h3>
		<h3 class="event-title">${post.title}</h3>
		<h4>${post.location}</h4>
		<h4>${post.city}</h4>
		<p><a href="${post.url}">More info...</a></p></div></li>`;
}

const formatDate = dateString => {
		const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
		return `${months[new Date(dateString).getUTCMonth()]} ${new Date(dateString).getUTCDate()}, ${new Date(dateString).getUTCFullYear()}`;
}

fetch('./events.json')
	.then(response => response.json())
	.then(data => {
		const upcoming = data.posts.filter(post => new Date(post.date) >= new Date());
		const past = data.posts.filter(post => new Date(post.date) < new Date());

		if (upcoming.length > 0) {
			let upcomingHTML = '';
			upcoming.sort( (a, b) => { return new Date(b.date) - new Date(a.date) }).slice(0,5).forEach((post) => {
				upcomingHTML += renderHTML(post);
			});
			document.getElementById('upcoming-list').innerHTML = upcomingHTML;
			document.getElementById('upcoming-header').style.display = 'flex';
			document.getElementById('upcoming-list').style.display = 'flex';
		}

		if (past.length > 0) {
			let pastHTML = '';
			past.sort( (a, b) => { return new Date(b.date) - new Date(a.date) }).slice(0,5).forEach(post => {
				pastHTML += renderHTML(post);
			});
			document.getElementById('past-list').innerHTML = pastHTML;
			document.getElementById('past-header').style.display = 'flex';
			document.getElementById('past-list').style.display = 'flex';
		}
	});
</script>
